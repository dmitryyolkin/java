<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1">

    <!-- Production persistence unit -->
    <persistence-unit name="BookService_PU" transaction-type="RESOURCE_LOCAL">
        <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>

        <!-- Entities -->
        <!-- if class is not specified then all POJO marked with Entities will be associated -->
        <class>com.yolkin.bookservice.Book</class>
        <properties>
            <property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/>

            <property name="javax.persistence.schema-generation.scripts.action" value="drop-and-create"/>
            <property name="javax.persistence.schema-generation.scripts.create-target" value="bookserviceCreate.ddl"/>
            <property name="javax.persistence.schema-generation.scripts.drop-target" value="bookserviceDrop.ddl"/>

            <!--
                Please see we use remote version (not embedded) what means we have to install Derby DB server
                and configure it.

                Please see details
                    * installation - http://db.apache.org/derby/papers/DerbyTut/install_software.html
                    * Derby Network Server - http://db.apache.org/derby/papers/DerbyTut/ns_intro.html

                    Short:
                    cd $DERBY_INSTALL/lib
                    java -jar derbyrun.jar server start
            -->

            <property name="javax.persistence.jdbc.driver" value="org.apache.derby.jdbc.ClientDriver"/>
            <property name="javax.persistence.jdbc.url" value="jdbc:derby://localhost:1527/bookservice;create=true"/>
            <property name="javax.persistence.jdbc.user" value="APP"/>
            <property name="javax.persistence.jdbc.password" value="APP"/>
            <property name="javax.persistence.sql-load-script-source" value="insert.sql"/>
            <property name="eclipselink.logging.level" value="INFO"/>
        </properties>
    </persistence-unit>

    <!-- Test persistence unit -->
    <persistence-unit name="BookService_PU_4Test" transaction-type="RESOURCE_LOCAL">
        <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>

        <!-- Entities -->
        <!-- if class is not specified then all POJO marked with Entities will be associated -->
        <class>com.yolkin.bookservice.Book</class>
        <properties>

            <!--
                The javax.persistence.schema-generation.database.action property is used to specify the action taken by the persistence provider
                when an application is deployed. If the property is not set, the persistence provider will not create or drop any database artifacts.

                *   none - No schema creation or deletion will take place.
                *   create - The provider will create the database artifacts on application deployment.
                            The artifacts will remain unchanged after application redeployment.
                *   drop-and-create - Any artifacts in the database will be deleted, and the provider will create the database artifacts
                            on deployment.
                *   drop - Any artifacts in the database will be deleted on application deployment.
            -->
            <property name="javax.persistence.schema-generation.database.action" value="create"/>

            <!-- These 3 properties below are requested to create SQL schema that can be used to create/drop tables with SQL later -->
            <!--<property name="javax.persistence.schema-generation.scripts.action" value="drop-and-create"/>-->
            <!--<property name="javax.persistence.schema-generation.scripts.create-target" value="create.sql"/>-->
            <!--<property name="javax.persistence.schema-generation.scripts.drop-target" value="drop.sql"/>-->

            <property name="javax.persistence.jdbc.driver" value="org.apache.derby.jdbc.EmbeddedDriver"/>
            <property name="javax.persistence.jdbc.url" value="jdbc:derby:memory:bookservice;create=true"/>
            <property name="javax.persistence.sql-load-script-source" value="insert.sql"/>
            <property name="eclipselink.logging.level" value="INFO"/>
        </properties>
    </persistence-unit>
</persistence>